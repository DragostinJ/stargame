{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["possibleCombinationSum","arr","n","indexOf","length","pop","listSize","combinationsCount","i","combinationSum","j","Stars","props","react_default","a","createElement","className","_","range","numberOfStars","map","key","Button","button","answerIsCorrect","onClick","acceptAnswer","checkAnswer","disabled","selectedNumbers","redraw","redraws","Answer","number","unselectNumber","Numbers","numberClassName","usedNumbers","list","selectNumber","DoneFrame","doneStatus","resetGame","Game","state","initialState","_this","setState","clickedNumber","prevState","concat","filter","randomNumberOfStars","reduce","acc","randomNumber","updateDoneStatus","possibleSolutions","_ref","possibleNumbers","_this$state","this","App_Stars","App_Button","App_Answer","App_DoneFrame","App_Numbers","React","Component","Math","floor","random","App","App_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.829c9727.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css'\nimport _ from 'lodash'\nvar possibleCombinationSum = function(arr, n) {\n  if (arr.indexOf(n) >= 0) { return true; }\n  if (arr[0] > n) { return false; }\n  if (arr[arr.length - 1] > n) {\n    arr.pop();\n    return possibleCombinationSum(arr, n);\n  }\n  var listSize = arr.length, combinationsCount = (1 << listSize);\n  for (var i = 1; i < combinationsCount ; i++ ) {\n    var combinationSum = 0;\n    for (var j=0 ; j < listSize ; j++) {\n      if (i & (1 << j)) { combinationSum += arr[j]; }\n    }\n    if (n === combinationSum) { return true; }\n  }\n  return false;\n};\n\nconst Stars = (props) => {\n  return (\n    <div className=\"col-5\">\n      {_.range(props.numberOfStars).map(i =>\n        <i key={i} className=\"fa fa-star\"></i>\n      )}\n    </div>\n  );\n};\n\nconst Button = (props) => {\n  let button;\n  switch(props.answerIsCorrect) {\n    case true:\n      button =\n        <button className=\"btn btn-success\" onClick={props.acceptAnswer}>\n          <i className=\"fa fa-check\"></i>\n        </button>;\n      break;\n    case false:\n      button =\n        <button className=\"btn btn-danger\">\n          <i className=\"fa fa-times\"></i>\n        </button>;\n      break;\n    default:\n      button =\n        <button className=\"btn\"\n                onClick={props.checkAnswer}\n                disabled={props.selectedNumbers.length === 0}>\n          =\n        </button>;\n      break;\n  }\n  return (\n    <div className=\"col-2 text-center\">\n      {button}\n      <br /><br />\n      <button className=\"btn btn-warning btn-sm\" onClick={props.redraw}\n              disabled={props.redraws === 0}>\n        <i className=\"fa fa-refresh\"></i> {props.redraws}\n      </button>\n    </div>\n  );\n};\n\nconst Answer = (props) => {\n  return (\n    <div className=\"col-5\">\n      {props.selectedNumbers.map((number, i) =>\n        <span key={i} onClick={() => props.unselectNumber(number)}>\n          {number}\n        </span>\n      )}\n    </div>\n  );\n};\n\nconst Numbers = (props) => {\n  const numberClassName = (number) => {\n    if (props.usedNumbers.indexOf(number) >= 0) {\n      return 'used';\n    }\n    if (props.selectedNumbers.indexOf(number) >= 0) {\n      return 'selected';\n    }\n  };\n  return (\n    <div className=\"card text-center\">\n      <div>\n        {Numbers.list.map((number, i) =>\n          <span key={i} className={numberClassName(number)}\n                onClick={() => props.selectNumber(number)}>\n            {number}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nNumbers.list = _.range(1, 10);\n\nconst DoneFrame = (props) => {\n  return (\n    <div className=\"text-center\">\n      <h2>{props.doneStatus}</h2>\n      <button className=\"btn btn-secondary\" onClick={props.resetGame}>\n        Play Again\n      </button>\n    </div>\n  );\n};\n\nclass Game extends React.Component {\n  static randomNumber = () => 1 + Math.floor(Math.random()*9);\n  static initialState = () => ({\n    selectedNumbers: [],\n    randomNumberOfStars: Game.randomNumber(),\n    usedNumbers: [],\n    answerIsCorrect: null,\n    redraws: 5,\n    doneStatus: null,\n  });\n  state = Game.initialState();\n  resetGame = () => this.setState(Game.initialState());\n  selectNumber = (clickedNumber) => {\n    if (this.state.selectedNumbers.indexOf(clickedNumber) >= 0) { return; }\n    this.setState(prevState => ({\n      answerIsCorrect: null,\n      selectedNumbers: prevState.selectedNumbers.concat(clickedNumber)\n    }));\n  };\n  unselectNumber = (clickedNumber) => {\n    this.setState(prevState => ({\n      answerIsCorrect: null,\n      selectedNumbers: prevState.selectedNumbers\n                                .filter(number => number !== clickedNumber)\n    }));\n  };\n  checkAnswer = () => {\n    this.setState(prevState => ({\n      answerIsCorrect: prevState.randomNumberOfStars ===\n        prevState.selectedNumbers.reduce((acc, n) => acc + n, 0)\n    }));\n  };\n  acceptAnswer = () => {\n    this.setState(prevState => ({\n      usedNumbers: prevState.usedNumbers.concat(prevState.selectedNumbers),\n      selectedNumbers: [],\n      answerIsCorrect: null,\n      randomNumberOfStars: Game.randomNumber(),\n    }), this.updateDoneStatus);\n  };\n  redraw = () => {\n    if (this.state.redraws === 0) { return; }\n    this.setState(prevState => ({\n      randomNumberOfStars: Game.randomNumber(),\n      answerIsCorrect: null,\n      selectedNumbers: [],\n      redraws: prevState.redraws - 1,\n    }), this.updateDoneStatus);\n  }\n  possibleSolutions = ({randomNumberOfStars, usedNumbers}) => {\n    const possibleNumbers = _.range(1, 10).filter(number =>\n      usedNumbers.indexOf(number) === -1\n    );\n\n    return possibleCombinationSum(possibleNumbers, randomNumberOfStars);\n  };\n  updateDoneStatus = () => {\n    this.setState(prevState => {\n      if (prevState.usedNumbers.length === 9) {\n        return { doneStatus: 'Done. Nice!' };\n      }\n      if (prevState.redraws === 0 && !this.possibleSolutions(prevState)) {\n        return { doneStatus: 'Game Over!' };\n      }\n    });\n  }\n  render() {\n    const {\n      selectedNumbers,\n      randomNumberOfStars,\n      answerIsCorrect,\n      usedNumbers,\n      redraws,\n      doneStatus,\n    } = this.state;\n\n    return (\n      <div className=\"container\">\n        <h3>Play Nine</h3>\n        <hr />\n        <div className=\"row\">\n          <Stars numberOfStars={randomNumberOfStars} />\n          <Button selectedNumbers={selectedNumbers}\n                  redraws={redraws}\n                  checkAnswer={this.checkAnswer}\n                  acceptAnswer={this.acceptAnswer}\n                  redraw={this.redraw}\n                  answerIsCorrect={answerIsCorrect} />\n          <Answer selectedNumbers={selectedNumbers}\n                  unselectNumber={this.unselectNumber} />\n        </div>\n        <br />\n        {doneStatus ?\n          <DoneFrame resetGame={this.resetGame} doneStatus={doneStatus} /> :\n          <Numbers selectedNumbers={selectedNumbers}\n                   selectNumber={this.selectNumber}\n                   usedNumbers={usedNumbers} />\n        }\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}